<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/rule/schema/v1.4">

    <group id="spring-injection:Default">
        <includeConstraint refId="spring-injection:InjectablesMustNotBeInstantiated"/>
        <includeConstraint refId="spring-injection:BeanProducerMustBeDeclaredInConfigurationComponent" />
        <includeConstraint refId="spring-injection:FieldsOfInjectablesMustNotBeManipulated"/>
        <includeConstraint refId="spring-injection:AvoidInitializingBean"/>
        <includeConstraint refId="spring-injection:AvoidDisposableBean"/>
        <includeConstraint refId="spring-injection:AvoidAwareInterfacesInFavorOfInjection"/>
        <includeConstraint refId="spring-injection:InjectablesMustNotBeHeldInStaticVariables"/>
        <includeConstraint refId="spring-injection:InjectablesMustNotBeAccessedStatically"/>
    </group>

    <group id="spring-injection:Strict">
        <includeConstraint refId="spring-injection:FieldInjectionIsNotAllowed"/>
        <includeConstraint refId="spring-injection:InjectablesShouldBeHeldInFinalFields"/>
    </group>

    <concept id="spring-injection:Injectable">
        <requiresConcept refId="spring-component:AnnotatedInjectables"/>
        <requiresConcept refId="spring-injection:BeanProducer"/>
        <description>Returns all injectables.</description>
        <cypher><![CDATA[
            MATCH
              (injectable:Spring:Injectable)
            RETURN
              injectable as Injectable
        ]]></cypher>
    </concept>

    <concept id="spring-injection:BeanProducer">
        <description>Labels methods which are annotated with "@org.springframework.context.annotation.Bean" with
            "BeanProducer" and their return types with "Spring" and "Injectable".
        </description>
        <cypher><![CDATA[
           MATCH
              (:Type)-[:DECLARES]->(beanProducer:Method)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(annotationType:Type),
              (beanProducer)-[:RETURNS]->(injectable:Type)
            WHERE
              annotationType.fqn = "org.springframework.context.annotation.Bean"
            SET
              injectable:Spring:Injectable,
              beanProducer:Spring:BeanProducer
            RETURN
              injectable as Injectable, beanProducer as BeanProducer
        ]]></cypher>
    </concept>

    <constraint id="spring-injection:InjectablesMustNotBeInstantiated">
        <requiresConcept refId="spring-injection:Injectable"/>
        <description>If the constructor of an Injectable is called from another Injectable, then the caller must be a BeanProducer.</description>
        <cypher><![CDATA[
            MATCH
              (injectable:Injectable:Type)-[:DECLARES]->(constructor:Constructor),
              (artifact:Artifact)-[:CONTAINS]->(type:Injectable:Type)-[:DECLARES]->(method:Method),
              shortestPath((method)-[:INVOKES*]->(constructor))
            WHERE NOT (
              artifact:Test
              OR method:Spring:BeanProducer
            )
            RETURN
              type as Type, method as Method, injectable as Injectable
        ]]></cypher>
    </constraint>

    <constraint id="spring-injection:BeanProducerMustBeDeclaredInConfigurationComponent">
        <requiresConcept refId="spring-injection:BeanProducer"/>
        <requiresConcept refId="spring-component:Configuration"/>
        <description>Bean producer methods must be declared in configuration components.</description>
        <cypher><![CDATA[
            MATCH
              (artifact:Artifact)-[:CONTAINS]->(type:Type)-[:DECLARES]->(beanProducer:Method:BeanProducer)-[:RETURNS]->(injectable:Injectable)
            WHERE NOT (
              artifact:Test
              OR type:Spring:Configuration
            )
            RETURN
              beanProducer as BeanProducer, injectable as Injectable
        ]]></cypher>
    </constraint>

    <concept id="spring-injection:InjectionPoint">
        <description>Labels all type members annotated with "@org.springframework.beans.factory.annotation.Autowired"
            with "Spring" and "InjectionPoint".
        </description>
        <cypher><![CDATA[
            MATCH
              (injectionPoint:Member)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(annotationType:Type)
            WHERE
              annotationType.fqn in [
                "org.springframework.beans.factory.annotation.Autowired",
                "javax.inject.Inject",
                "javax.annotation.Resource"
              ]
            SET
              injectionPoint:Spring:InjectionPoint
            RETURN
              injectionPoint as InjectionPoint
        ]]></cypher>
    </concept>

    <constraint id="spring-injection:FieldInjectionIsNotAllowed">
        <requiresConcept refId="spring-injection:InjectionPoint"/>
        <description>Field injection is not allowed, use constructor injection instead.</description>
        <cypher><![CDATA[
            MATCH
              (artifact:Artifact)-[:CONTAINS]->(type:Type)-[:DECLARES]->(field:Field:InjectionPoint)
            WHERE NOT
               artifact:Test
            RETURN
              type as Type, field as Field
        ]]></cypher>
    </constraint>

    <constraint id="spring-injection:InjectablesShouldBeHeldInFinalFields">
        <requiresConcept refId="spring-injection:Injectable"/>
        <requiresConcept refId="spring-injection:InjectionPoint"/>
        <description>Fields holding injectables should be declared final.</description>
        <cypher><![CDATA[
            MATCH
              (artifact:Artifact)-[:CONTAINS]->(source:Type:Injectable)-[declares:DECLARES]->(field:Field)-[:OF_TYPE]->(target:Type:Injectable)
            WHERE NOT (
              artifact:Test
              OR (exists(field.final) AND field.final = true)
              OR (exists(field.synthetic) AND field.synthetic) // synthetic fields, e.g. generated by Groovy
            )
            RETURN
              source as InjectableType, field as InjectableField
        ]]></cypher>
    </constraint>

    <constraint id="spring-injection:FieldsOfInjectablesMustNotBeManipulated">
        <requiresConcept refId="spring-injection:Injectable"/>
        <description>Fields of injectable types must not be manipulated, except from constructors.</description>
        <cypher><![CDATA[
            MATCH
              (artifact:Artifact)-[:CONTAINS]->(injectable:Injectable),
              (injectable)-[:DECLARES]->(field:Field),
              (injectable)-[:DECLARES]->(method:Method),
              (method)-[writes:WRITES]->(field)
            WHERE NOT (
               artifact:Test
               OR method:Constructor // method is a constructor
               OR (exists(field.static) AND field.static)       // static fields
               OR (exists(field.synthetic) AND field.synthetic) // synthetic fields, e.g. generated by Groovy
            )
            RETURN
              injectable.fqn + "." + method.name + "(…) writes field '" + field.name + "' at line " + writes.lineNumber as Message,
              injectable as Injectable, method as Method, field as Field, writes.lineNumber as LineNumber
        ]]></cypher>
    </constraint>

    <constraint id="spring-injection:AvoidInitializingBean">
        <description>Prefer to use @PostConstruct over implementing InitializingBean.
        </description>
        <cypher><![CDATA[
            MATCH
              (artifact:Artifact)-[:CONTAINS]->(type:Type)-[:IMPLEMENTS]->(otherType:Type)
            WHERE
              NOT artifact:Test
              AND otherType.fqn = "org.springframework.beans.factory.InitializingBean"
            RETURN
              type as Type
        ]]></cypher>
    </constraint>

    <constraint id="spring-injection:AvoidDisposableBean">
        <description>Prefer to use @PreDestroy over implementing DisposableBean.</description>
        <cypher><![CDATA[
            MATCH
              (artifact:Artifact)-[:CONTAINS]->(type:Type)-[:IMPLEMENTS]->(otherType:Type)
            WHERE
              NOT artifact:Test
              AND otherType.fqn = "org.springframework.beans.factory.DisposableBean"
            RETURN
              type as Type
        ]]></cypher>
    </constraint>

    <constraint id="spring-injection:AvoidAwareInterfacesInFavorOfInjection">
        <description>Prefer to inject framework components over implementing '…Aware' interfaces.</description>
        <cypher><![CDATA[
            MATCH
              (artifact:Artifact)-[:CONTAINS]->(type:Type)-[:IMPLEMENTS]->(otherType:Type)
            WHERE
              NOT artifact:Test
              AND otherType.fqn in [
                "org.springframework.beans.factory.BeanFactoryAware",
                "org.springframework.context.ApplicationContextAware",
                "org.springframework.context.ApplicationEventPublisherAware"
              ]
            RETURN
              type as Type, otherType as ImplementedInterface
        ]]></cypher>
    </constraint>

    <constraint id="spring-injection:InjectablesMustNotBeHeldInStaticVariables">
        <requiresConcept refId="spring-injection:Injectable"/>
        <description>Injectable components must not be held in static variables.</description>
        <cypher><![CDATA[
            MATCH
              (artifact:Artifact)-[:CONTAINS]->(type:Type)-[:DECLARES]->(field:Field)-[:OF_TYPE]->(:Type:Injectable)
            WHERE
              NOT artifact:Test
              AND field.static
            RETURN
              type as Type, field.name as Field
        ]]></cypher>
    </constraint>

    <constraint id="spring-injection:InjectablesMustNotBeAccessedStatically">
        <requiresConcept refId="spring-injection:Injectable"/>
        <description>Injectable components must not be accessed from static variables.</description>
        <cypher><![CDATA[
            MATCH
              (artifact:Artifact)-[:CONTAINS]->(type:Type)-[:DECLARES]->(field:Field)-[:OF_TYPE]->(:Type:Injectable),
              (method:Method)-[:WRITES|READS]->(field)
            WHERE
              NOT artifact:Test
              AND field.static
            RETURN
              method as Method, field.name as Field
        ]]></cypher>
    </constraint>
</jqa:jqassistant-rules>
