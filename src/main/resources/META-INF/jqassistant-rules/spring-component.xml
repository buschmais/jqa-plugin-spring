<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/rule/schema/v1.4">

    <group id="spring-component:Default">
        <includeConstraint refId="spring-component:ControllerMustOnlyDependOnServicesRepositories"/>
        <includeConstraint refId="spring-component:ServiceMustOnlyDependOnServicesRepositories"/>
        <includeConstraint refId="spring-component:RepositoryMustOnlyDependOnRepositories"/>
    </group>

    <group id="spring-component:Strict">
        <includeGroup refId="spring-component:Default"/>
    </group>

    <concept id="spring-component:Component">
        <requiresConcept refId="spring-component:Controller"/>
        <requiresConcept refId="spring-component:Service"/>
        <requiresConcept refId="spring-component:Repository"/>
        <requiresConcept refId="spring-component:Configuration"/>
        <description>Labels all types annotated with "@org.springframework.stereotype.Component" with "Spring" and "Component".
        </description>
        <cypher><![CDATA[
            MATCH
              (component:Type)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(annotationType:Type)
            WHERE
              annotationType.fqn in [
                "org.springframework.stereotype.Component",
                "org.springframework.web.bind.annotation.ControllerAdvice"
              ]
            SET
              component:Spring:Component
            RETURN
              component as Component
        ]]></cypher>
    </concept>

    <concept id="spring-component:Controller">
        <requiresConcept refId="spring-*:*Controller" />
        <description>Labels all types annotated with "@org.springframework.stereotype.Controller" with "Spring",
            "Controller" and "Component".
        </description>
        <cypher><![CDATA[
            MATCH
              (controller:Type)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(annotationType:Type)
            WHERE
              annotationType.fqn in [
                "org.springframework.stereotype.Controller"
              ]
            SET
              controller:Spring:Controller:Component
            RETURN
              controller as Controller
        ]]></cypher>
    </concept>

    <concept id="spring-component:Service">
        <description>Labels all types annotated with "@org.springframework.stereotype.Service" with "Spring", "Service"
            and "Component".
        </description>
        <cypher><![CDATA[
            MATCH
              (service:Type)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(annotationType:Type)
            WHERE
              annotationType.fqn in [
                "org.springframework.stereotype.Service"
              ]
            SET
              service:Spring:Service:Component
            RETURN
              service as Service
        ]]></cypher>
    </concept>

    <concept id="spring-component:Repository">
        <requiresConcept refId="spring-*:*Repository"/>
        <description>Returns all repositories.</description>
        <cypher><![CDATA[
            MATCH
              (repository:Spring:Repository:Component)
            RETURN
              repository as Repository
        ]]></cypher>
    </concept>

    <concept id="spring-component:Configuration">
        <description>Labels all types annotated with "@org.springframework.context.annotation.Configuration" with
            "Spring", "Configuration" and "Component".
        </description>
        <cypher><![CDATA[
            MATCH
              (configuration:Type)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(annotationType:Type)
            WHERE
              annotationType.fqn in [
                "org.springframework.context.annotation.Configuration",
                "org.springframework.boot.autoconfigure.SpringBootApplication",
                "org.springframework.data.web.config.SpringDataWebConfigurationMixin"
              ]
            SET
              configuration:Spring:Configuration:Component
            RETURN
              configuration as Configuration
        ]]></cypher>
    </concept>

    <concept id="spring-component:InjectableComponent">
    	<requiresConcept refId="spring-component:Component"/>
        <description>Labels all Spring Components as "Injectable".</description>
        <cypher><![CDATA[
            MATCH
              (injectableComponent:Spring:Component)
            SET
              injectableComponent:Injectable
            RETURN
              injectableComponent as InjectableComponent
        ]]></cypher>
    </concept>

    <constraint id="spring-component:ControllerMustOnlyDependOnServicesRepositories">
        <requiresConcept refId="java:VirtualDependsOn"/>
        <requiresConcept refId="spring-component:InjectableComponent"/>
        <description>A Spring controller can only have dependencies to other Spring components that are services or
            repositories.
        </description>
        <cypher><![CDATA[
            MATCH
              (artifact:Artifact)-[:CONTAINS]->(controller:Spring:Controller)-[:DEPENDS_ON|VIRTUAL_DEPENDS_ON]->(other:Spring:Component)
            WHERE NOT (
               artifact:Test
               or ((other:Service or other:Repository or other:Component) and not (other:Controller or other:Configuration))
            )
            RETURN
              controller as Controller, collect(other) as InvalidDependencies
        ]]></cypher>
    </constraint>

    <constraint id="spring-component:ServiceMustOnlyDependOnServicesRepositories">
        <requiresConcept refId="java:VirtualDependsOn"/>
        <requiresConcept refId="spring-component:InjectableComponent"/>
        <description><![CDATA[
            A Spring service can only have dependencies to other Spring components that are services or repositories.
        ]]></description>
        <cypher><![CDATA[
            MATCH
              (artifact:Artifact)-[:CONTAINS]->(service:Spring:Service)-[:DEPENDS_ON|VIRTUAL_DEPENDS_ON]->(other:Spring:Component)
            WHERE NOT (
              artifact:Test
              or ((other:Service or other:Repository or other:Component) and not (other:Controller or other:Configuration))
            )
            RETURN
              service as Service, collect(other) as InvalidDependencies
        ]]></cypher>
    </constraint>


    <constraint id="spring-component:RepositoryMustOnlyDependOnRepositories">
        <requiresConcept refId="java:VirtualDependsOn"/>
        <requiresConcept refId="spring-component:InjectableComponent"/>
        <description>A Spring repository can only have dependencies to other Spring components that are repositories.
        </description>
        <cypher><![CDATA[
            MATCH
              (artifact:Artifact)-[:CONTAINS]->(repository:Spring:Repository)-[:DEPENDS_ON|VIRTUAL_DEPENDS_ON]->(other:Spring:Component)
            WHERE NOT (
              artifact:Test
              or ((other:Repository or other:Component) and not (other:Controller or other:Service or other:Configuration))
            )
            RETURN
              repository as Repository, collect(other) as InvalidDependencies
        ]]></cypher>
    </constraint>

</jqa:jqassistant-rules>
